exit
routes[1].map { |route| route.data }
routes[0].map { |route| route.data }
routes.length
routes
n
root.data
routes.size
routes
routes.class
n
destination
root
s
routes.class
n
routes.last.class
routes.last
routes.class
s
n
s
n
routes.length
routes.class
routes
n
c
n
c
n
display routes
display destination.data
display root.data
display
undisplay 1
display root
s
n
bt
n
bt
n
bt
n
s
bt
n
bt
m
bt
n
s
n
s
n
s
n
bt
n
bt
n
s
n
display
bt
n
bt
n
s
n
bt
n
s
n
s
n
bt
n
bt
n
s
n
s
n
display
display found_node
display child_position
display move
display children
display past_nodes
display position
n
children
n
bt
n
bt
n
s
n
s
n
s
n
s
n
display found_node
display child_position
display move
display children
display past_nodes
display position
n
s
n
s
n
bt
n
s
n
bt
n
bt
s
display
display found_node
n
s
display
undisplay 3
n
display child_position
display move
display children
display past_nodes
display position
n
s
n
bt
s
n
bt
n
bt
n
bt
n
bt
n
bt
s
n
s
n
display found_node
display child_position
display move
display children
display node
display past_nodes
display position
n
s
n
display found_node
display child_position
display move
display children
display node
display past_nodes
display position
n
display found_node
display child_position
display move
display children
display node
display past_nodes
display position
n
bt
n
s
n
bt
n
bt
n
bt
s
n
s
n
bt
n
bt
n
display child_position
display move
display children
display node
display found_node
display past_nodes
display position
n
display
undisplay 3
display
display child_position
display move
display children
display node
display found_node
display position.valid?
display past_nodes
display position
n
bt
n
s
n
bt
n
bt
n
bt
n
bt
n
bt
s
bt
n
s
n
display
display child_position
display move
display children
display node
display found_node
display past_nodes
display position
n
s
n
display
display found_node
undisplay 3
n
display
display child_valid
display child_position
